\documentclass[uplatex, 11pt, a4j, dvipdfmx, class=ujarticle, crop=false]{standalone}

\usepackage{./preambles/ownpack}

% -----------------------------------------------------------------------
% 本文
% -----------------------------------------------------------------------

\begin{document}
  \section{遺伝的アルゴリズム}\label{sec:genetic-algorithm}
    \subsection{概要}
      遺伝的アルゴリズム(genetic algorithm)は 1960 年代に Holland によって導入されたアルゴリズムである。
      これは生物の進化の過程を模したアルゴリズムであり、1980 年代ごろから活発に研究され始めた。
      特徴としては主に以下の3つがある。
      \begin{itemize}
        \item 複数の解候補を同時並行的に更新していく反復解法
        \item 解候補に対する交叉(crossover)という演算が用いられる
        \item 柔軟性が高い
      \end{itemize}
      遺伝的アルゴリズムの登場以来、このアルゴリズムの特徴を取り入れて別のアルゴリズムが改良されたり、遺伝的アルゴリズムが別のアルゴリムを取り入れて改良されたりしている。

      遺伝的アルゴリズムは生物の進化過程である遺伝を模したアルゴリムである。
      生物の個体は形質とよばれる形態的・生理的な特徴を継承していく。
      これは細胞が分裂するさいに細胞中の遺伝子(gene)が複製されることによるものである。
      細胞分裂時には各遺伝子が一列に並んだ染色体(chromosome)となり、各遺伝子が染色体上のどの位置に並ぶかは決まっており、この位置を遺伝子座(locus)という。
      また遺伝子は劣勢な遺伝子や優勢な遺伝子等複数種類存在し、遺伝子座が同じであり種類の違う遺伝子を対立遺伝子(allele)と呼ぶ。
      % TODO: 対立遺伝子については要出展
      対立遺伝子の並びを遺伝子型(genotype)と言い、遺伝子型と遺伝子の種類によって表面的に表われる形質を表現型(phenotype)という。
      % TODO: 対立遺伝子の並び is 何
      通常の細胞分裂では遺伝子型は変化しないが、2本の染色体の一部が入れ換って遺伝子の組替えが生じたり、一部の遺伝子が変化したりすることによって新しい遺伝子型が形成される。
      ここで前者を交叉、後者を突然変異(mutation)と呼ぶ。
      このような手順で生物は子孫を残す。
      生物いろいろな遺伝子を持つが、環境に適応し生き残ることができた個体が子孫を残すことになるため、子孫に遺伝する遺伝子は環境への適応度(fitness)が高いものである可能性が高い。
      このように優秀な遺伝子が残される仕組みを選択・淘汰(selection)と呼ばれる。

      遺伝的アルゴリズムは上述した生物の進化過程の上で個体を解候補、適応度を目的関数へと対応づけ、選択・交叉・突然変異に対応した演算を実行することで目的関数により適した解を得ようとするアルゴリズムである。
      このアルゴリズムは生物の進化をモデル化したものではあるが、最適化の計算過程と生物進化の知見とは強い関係はない。

    \subsection{アルゴリズム}
      一般に遺伝的アルゴリズムは最適化問題に対する近似解法として用いられる。
      目的関数を$z$、実行可能領域を$A$としたときに$A$を終域とする全単射が定まるような始域$P$の元として個体が定まる。
      個体$p \in P$は遺伝子$g$の集まりとして表現され、どのように遺伝子を並べて個体を表現するかは比較的任意性がある。
      最も単純な並べ方としては目的関数の変数を1次元的に並べたものであるが、交叉・突然変異等が適切に働くのであれば別の表現を用いることもできる。

      また遺伝子による個体の表現$p \in P$を遺伝子型、遺伝子型から得られる解候補$a \in A$を表現型と言い、$P$の元から$A$の元へと写像することをデコーディング(decoding)という。
      これらの関係を図式に表すと
      \begin{equation}
        \begin{CD}
          P @>decoding>> A
        \end{CD}
      \end{equation}
      となる。
      本節では個体と遺伝子型を等しいものとして扱う。

      複数の個体からなる個体群(population)$P$に対して、以下の繰り返し計算を行うことで解を探索する。
      なお、遺伝的アルゴリズムでは1回の繰り返しを1世代(generation)と呼ぶ。
      \begin{description}
        \descitem{Step1}{itm:GA:step1}
          初期個体群を生成し、世代を1とする
        \descitem{Step2}{itm:GA:step2}
          交叉則・突然変異則・選択則を現在の個体群に適用し、新たな個体群を生成する
        \descitem{Step3}{itm:GA:step3}
          終了条件を満たせば計算を終了しそれまでに得られた最もよい個体を解とする、そうでない場合は世代を1つ増やして\ref{itm:GA:step2}へ戻る
      \end{description}
      \ref{itm:GA:step3}での終了条件は一般に世代数の上限として定められる。
      ほかには、何世代か続けて現最良個体よりもよい個体が生成されないこととする等の方法がある。

      \ref{itm:GA:step2}での交叉則・突然変異則・選択則は遺伝演算子(genetic operation)と呼ばれる。
      \begin{description}
        \descitem{交叉則}{}
          複数の個体の遺伝子をいくつか入れ換えて新しい個体を生成する演算である。
          ある$p_1, p_2, \cdots, p_n$に交叉則を作用させ、$p'_1, p'_2, \cdots, p'_n$が得られたとき、$p_1, p_2, \cdots, p_n$それぞれを親、$p'_1, p'_2, \cdots, p'_n$それぞれを子という。
          %交叉則によって生成された子は親と近い遺伝子を持つため、親の適応度が高ければ子の適応度も高くなることが期待される。
        \descitem{突然変異則}{}
          ある個体の遺伝子を変更して新しい個体を生成する演算である。
          交叉則と同様に、$p$から$p'$が生成された場合は$p$を親、$p'$を子という。
          %また親のと近いいでんし...
        \descitem{選択則}{}
          個体群中の個体、もしくは個体群中の個体から交叉則や突然変異則によって生成された子から次の世代に必要な個体を選択する演算である。
          各個体への目的関数が大きい(小さい)個体、もしくは適応度の高い個体を選択する。
      \end{description}
      交叉則や突然変異則によって生成された子は親と近い遺伝子を持つため、親の適応度が高ければ子の適応度も高くなることが期待される。
      また交叉則において親の適応度が高くない場合でも親の優れた遺伝子のみを受け継ぎより高い適応度の子が生成される可能性もある。

      6個体の個体群に対する遺伝的アルゴリズムの一例を示す。
\end{document}

